'\" <<ital-is-var>>
'\" <<bold-is-fixed>>
.TH GMA-GO-ROLL 6 "Go-GMA 5.28.0" 10-Jun-2025 "Games" \" @@mp@@
.SH NAME
gma go roll \- GMA die roller CLI application (Go version)
.SH SYNOPSIS
'\" <<usage>>
.LP
(If using the full GMA core tool suite)
.LP
.na
.B gma
.B go
.B roll
[options as described below...]
.ad
.LP
(Otherwise)
.LP
.na
.B roll
.B \-h
.LP
.B roll
.B \-help
.LP
.B roll
.B \-syntax
.LP
.B roll
.RB [ \-dice
.IR string ]
.RB [ \-json ]
.RB [ \-seed
.IR int ]
.ad
'\" <</usage>>
.SH DESCRIPTION
.LP
.B Roll
provides a command-line utility that rolls dice using
the GMA dice library without requiring a functioning
GMA game server to roll the dice for you.
.LP
It can be used interactively by users or it can be embedded
into scripts or other back-end services.
.LP
The full description of what can go into a die roll expression string
is documented in
.BR gma-dice-syntax (7).
.SH OPTIONS
.LP
Options may be introduced with either one or two hyphens (e.g.,
.B \-json
or
.BR \-\-json ).
Options which take parameter values may have the value separated
from the option name by a space or an equals sign (e.g.,
.B \-seed=2323
or
.BR "\-seed 2323" ), 
except for boolean flags which may be given
alone (e.g.,
.BR \-json )
to indicate that the option is set to \*(lqtrue\*(rq or may be given
an explicit value which must be attached to the option with an
equals sign (e.g.,
.B \-json=true
or
.BR \-json=false ).
'\" <<list>>
.TP 15
.BI "\-dice " string
Specify the die-roll expression to be rolled, such as
.RB \*(lq 3d6 \*(rq.
.RS
.LP
Multiple die-roll expressions may be given as the value to this option,
separated from one another by semicolons
.RB (\*(lq ; \*(rq).
In this case each will be rolled in the sequence given. This allows a group
of die rolls to be performed from a single seed value in a single invocation
of the program.
.LP
If this is not given,
.B roll
will interactively prompt for die-roll expressions and roll
each as they're typed in. Typing a blank line repeats the
previous expression. The program will exit on EOF.
.RE
.TP
.B \-help
Print a command option summary and exit.
.TP
.B \-json
Output the results as a JSON string instead of plain text.
.TP
.BI "\-seed " int
Instead of using a random seed value, base the die roll
results on the given value. The
.I int
value is a 64-bit integer expressed in decimal digits.
.TP
.B \-syntax
Print a summary of the die-roll expression syntax and exit.
In interactive mode, this help text may be produced by
typing
.RB \*(lq help \*(rq
as the input line.
'\" <</>>
.SH "OUTPUT FORMATS"
.SS "Text Output"
.LP
The plain-text output format (the default) briefly summarizes each result and the die rolls which were made to reach that result.
This output uses ANSI escape codes to add colors for emphasis.
.LP
In case a die roll specification yields three or more results (e.g., from a spec such as
.RB \*(lq "3d6+5|repeat 20" \*(rq),
a line of statistics will be printed, showing the number of results (N),
population mean value (\[mc]),
standard deviation (\[*s]),
median value (Md),
mode value(s) (Mo),
and the sum of all results in the set (\[*S]).
.SS "JSON Output"
.LP
If JSON output is requested, a single JSON object will be printed to standard output,
with the following fields. Fields which are not relevant or have a zero value may be omitted
entirely from the output.
'\" <<list>>
'\" <</ital-is-var>>
.TP
.BI "ResultSet " "(list of objects)"
The value is a list of JSON objects, each containing one set of results from the set of die-roll specifications.
Each value is an object with the following fields:
'\" <<list>>
.RS
.TP
.BI "Title " (string)
The title (label) string, if any, specified by the user (this is the initial part of the die-roll
spec, separated from the rest of the expression by an equals sign).
.TP
.BI "Results " "(list of objects)"
This is a list of JSON objects, each describing one of the results from a single die-roll specification.
Each element of the list is an object with the following fields:
'\" <<list>>
.RS
.TP
.BI "ResultSuppressed " (bool)
If true, this indicates that the results are not shown to the user. They may have been sent privately
to the GM, for example,
.TP
.BI "InvalidRequest " (bool)
If true, this indicates that the request could not be understood and thus no results have been generated.
.TP
.BI "Result " (int)
The total result of the die-roll expression, truncated to an integer (rounded toward zero).
.TP
.BI "Details " "(list of objects)"
This list describes the die-roll expression that led to the result, including subtotals and the value rolled
for each individual die. Each element of the list is a JSON object with the following fields:
'\" <<list>>
.RS
.TP
.BI Type
The type of value this element represents.
.TP
.B Value
The value of the element, expressed as a string.
'\" <</>>
.RE
'\" <</>>
.RE
.TP
.BI "Stats " "(object or null)"
If there are 2 or more results in the result set, this object will provide statistics about the result set's values. It contains
the following fields:
'\" <<list>>
.RS
.TP
.BI "N " (int)
The population size (number of results analyzed).
.TP
.BI "Mean " (float)
The population mean (simple average).
.TP
.BI "Median " (float)
The median value of the result set.
.TP
.BI "Mode " (list of ints)
The mode value (the value which occured most). If there's a tie for the most popular number,
all of the most popular ones are listed.
.TP
.BI "StdDev " (float)
The standard deviation of the values.
.TP
.BI "Sum " (int)
The sum of all the values in the result set.
'\" <</>>
.RE
'\" <</>>
.RE
.TP
.BI "Seed " (int)
The random-number seed used to generate this set of die rolls.
'\" <</>>
.SH "SEE ALSO"
.LP
.BR dice (3),
.BR gma-roll (6).
.LP
This program is analogous to, but has more features than,
the Python-based
.B gma
.B roll
program from GMA-Core.
.SH AUTHOR
.LP
Steve Willoughby / steve@madscience.zone.
.SH BUGS
.LP
The default seed chosen by the underlying die-rolling library is always 32 bits long, but that may change in the future,
so don't rely on that fact.
.SH COPYRIGHT
Part of the GMA software suite, copyright \(co 1992\-2025 by Steven L. Willoughby, Aloha, Oregon, USA. All Rights Reserved. Distributed under BSD-3-Clause License. \"@m(c)@